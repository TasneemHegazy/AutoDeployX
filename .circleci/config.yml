version: 2.1



commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here
      id:
        default: "123"
        type: string   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.id>>
            aws s3 rm s3://udapeople-<<parameters.id>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.id>>

  install-awscli: 
    steps:
      - run:
          name: Install aws cli
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
            
        # msiexec.exe /i https://awscli.amazonaws.com/AWSCLIV2.msi
  
  install-ansible:
    steps:
      - run:
          name: Install ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible
            
         # curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
            # python3 get-pip.py --user
            # python3 -m pip install --user ansible
            # python3 -m pip install --upgrade --user ansible


  install-node:
    steps:
      - run: 
          name: "Install node js"
          command: |
            curl -fsSL https://deb.nodesource.com/setup_lts.x | sudo -E bash -
            sudo apt install -y nodejs  
            sudo npm install --global n
            sudo n 13.8.0        

       # yum install -y nodejs  
            # npm install --global n
            # npm start
            # n 13.8.0 
       # curl -L https://raw.githubusercontent.com/tj/n/master/bin/n -o n
            # bash n lts
            # npm install -g n
           



  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      WorkflowId:
        type: string   
    steps:
      - run:
          name: Revert migrations

          when: on_fail
          command: |
            SUCCESS=$(curl --insecure https://kvdb.io/8cxCTu4FSvvU4ZbfooF2mD/migration_<<parameters.WorkflowId>>)
            if(( $SUCCESS == 1 )); 
            then
              cd ~/project/backend
              npm install  
              npm run migrations:revert          
            fi
       
jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
             # Your code here
             cd backend
             npm install
             npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [fronted-build]
      - run: 
          name: Test front-end
          command: |
            cd frontend
            npm install
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm install
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Analyze/Scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      # Your job code here
      - run:
          name: Analyze/Scan backend
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical


  deploy-infrastructure-:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7} \
            --parameter-overrides ID=${CIRCLE_WORKFLOW_ID:0:7} \
            --tags project=udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> ~/project/.circleci/ansible/inventory.txt
            cat ~/project/.circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"      


  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install-ansible
      - install-awscli
      - add_ssh_keys:
          fingerprints: ["82:66:b2:5f:21:73:a0:1c:dd:35:12:23:ff:2c:d6:53"]
      - attach_workspace:
          at: ~/           
      - run:
          name: Configure server
          command: |
            # Your code here
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
            

  run-migrations:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - install-awscli
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            
      - run:
          name: Send migration results to kbdb.io
          command: |   
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
                curl https://kvdb.io/8cxCTu4FSvvU4ZbfooF2mD/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          WorkflowId: "${CIRCLE_WORKFLOW_ID:0:7}"
           

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: cimg/base:stable
    steps:
      # Checkout code from git
      - checkout
      - install-awscli
      - install-node
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL="http://${BACKEND_IP}:3030" 
            echo "API_URL = ${API_URL}"
            echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install 
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      # Here's where you will add some code to rollback on failure
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          WorkflowId: "${CIRCLE_WORKFLOW_ID:0:7}"             
                    
  deploy-backend:
    docker:
      - image: cimg/base:stable

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["82:66:b2:5f:21:73:a0:1c:dd:35:12:23:ff:2c:d6:53"]
      - attach_workspace:
          at: ~/
      - install-awscli
      - install-node
      - install-ansible


      - restore_cache:
          keys: [backend-build]
      - run:
          name: Install dependencies
          command: |
            sudo apt -y install tar gzip curl
            cd backend
            npm install
      # cd backend
            # npm install
            # npm i --legacy-peer-deps
      - run:
          name: package backend
          command: |

            cd backend
            npm i
            npm run build
            cd ..
            cd .circleci/ansible
            mkdir files
            cd files
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml 
            tar -C backend -czvf artifact.tar.gz .
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
            # cd backend
            # npm install
            # npm run build
            # cd ..
            # tar -C backend -czvf artifact.tar.gz .
            # cat ~/project/.circleci/ansible/inventory.txt
            # ansible-playbook -i ~/project/.circleci/ansible/inventory.txt ~/project/.circleci/ansible/deploy-backend.yml
            
         # cd backend
            # npm install
            # npm run build
            # cd ..
            # tar -C backend -czvf artifact.tar.gz .
      #       # cp artifact.tar.gz .circleci/ansible/roles/deploy/files 
      # - run:
      #     name: deploy backend
      #     command: |
      #       export TYPEORM_MIGRATIONS_DIR=./migrations
      #       export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
      #       export TYPEORM_MIGRATIONS=./migrations/*.ts
      #       cd .circleci/ansible
      #       cat inventory.txt
      #       ansible-playbook -i inventory.txt deploy-backend.yml           
      - destroy-environment:
          id: "${CIRCLE_WORKFLOW_ID:0:7}"
      - revert-migrations:
          WorkflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

#   smoke-test:
#     docker:
#       - image: cimg/base:stable 
#     steps:
#       # Checkout code from git
#       - checkout
#       - install-awscli
#       - install-node
#       - run:
#           name: backend smoke test
#           command: |
#             # your code here
#             BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
#               --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --output text)
#             export API_URL=http://${BACKEND_PUBLIC_IP}:3030
#             echo "${API_URL}"
#             if curl -s ${API_URL}/api/status | grep "ok"
#             then 
#               exit 0
#             else
#               exit 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             # your code here
#             FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
#             if curl -s $FRONTEND_WEBSITE | grep "Welcome"
#             then
#               exit 0
#             else
#               exit 1
#             fi
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           WorkflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: cimg/base:stable
#     steps:
#       # Checkout code from git
#       - checkout
#       - install-awscli
#       - install-node
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             # your code here
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --parameter-overrides WorkflowID=${CIRCLE_WORKFLOW_ID:0:7} \
#               --stack-name InitialStack
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           WorkflowId: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cleanup:
#       docker:
#         # Docker image here
#         - image: cimg/base:stable
#       steps:
#         # Checkout code from git
#         - checkout
#         - install-awscli
#         - run:
#             name: Get old stack workflow id and remove stacks
#             command: |
#               # your code here
#               export OldWorkflowID=$(aws cloudformation \
#                 list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
#                 --no-paginate --output text)
#               echo "Old workflow id: ${OldWorkflowID}"
#               export STACKS=($(aws cloudformation list-stacks \
#                 --query "StackSummaries[*].StackName" \
#                 --stack-status-filter CREATE_COMPLETE --no-paginate --output text))
#               echo Stack names: "${STACKS[@]}"
#               if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
#               then
#                 echo '-------------Delete confirmed---------------------------'
#                 aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
#                 aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
#                 aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
#               else
#                 echo '-----------------cannot clean up-------------------------'
#               fi
              
  

            
            
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - deploy-infrastructure-:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure-]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      # - smoke-test:
      #     requires: [deploy-backend, deploy-frontend]
      # - cloudfront-update:
      #     requires: [smoke-test]
      # - cleanup:
      #     requires: [cloudfront-update]
